# name: Check lowercase in filenames

# on:
#   pull_request:
#     paths:
#       - '/ct/*.sh'
#       - '/install/*.sh'
      
# jobs:
#   check-lowercase-filenames:
#     runs-on: lxc
#     steps:
#       - name: Checkout Code
#         uses: actions/checkout@v4
#       - name: Check lowercase in filenames
#         shell: bash
#         run: |
#           set -e
#           ERROR_COUNT=0
#           FILES=$(find . -name "*.sh")

#           for FILE in $FILES; do
#             if [[ "$FILE" =~ ^[a-z0-9._-]+$ ]]; then
#                 echo "$FILE: Check for lowercase in filename passed."
#             else
#                 echo "Error in $FILE. Change filename to lowercase."
#                 ERROR_COUNT=$((ERROR_COUNT + 1))
#             fi
#           done

#           if [[ "$ERROR_COUNT" -gt 0 ]]; then
#               echo "$ERROR_COUNT script(s) failed validation."
#               exit 1
#           else
#               echo "All scripts passed."
#           fi


name: Check lowercase in filenames

on:
  pull_request:
    paths:
      - 'ct/*.sh'
      - 'install/*.sh'
      
jobs:
  check-lowercase-filenames:
    runs-on: lxc
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        
      - name: Get changed files
        id: changed-files
        run: |
          # List added or modified files in the PR that match *.sh
          git diff --name-only --diff-filter=AM origin/main | grep -E '^(ct|install)/.*\.sh$' || true
        shell: bash

      - name: Check lowercase in filenames
        shell: bash
        run: |
          set -e
          # Fetch changed files from the previous step
          FILES="${{ steps.changed-files.outputs.result }}"

          for FILE in $FILES; do
              BASENAME=$(basename "$FILE")
              if [[ "$BASENAME" =~ ^[a-z0-9._-]+$ ]]; then
                  echo "$FILE: Check for lowercase in filename passed."
              else
                  echo "Error in $FILE. Change filename to lowercase."
                  ERROR_COUNT=$((ERROR_COUNT + 1))
              fi
          done

          # Exit with an error if any filenames are invalid
          if [[ "$ERROR_COUNT" -gt 0 ]]; then
              echo "$ERROR_COUNT script(s) have invalid filenames."
              exit 1
          else
              echo "All filenames are valid."
          fi
